* Overview
** Preconditions

*** Audience knowledge assumptions

- They know how to create, deploy and manage any web applications.
- They have architect some of them.
- They have small knowledge regarding operations side.
- They have good knowledge about at least one language / platform.

** Post-conditions
*** Explained Definitions

**** 'Micro' in context of programmers work, not responsibility.
**** Micro-service
**** DevOps Culture
**** Blue-Green Deployment
**** Capacity Planning

*** Proposed Solutions
**** Measure, then cut
**** Build incrementally
***** Automation is a cost, lack of it is not a technical debt
***** Deal with the costs by introducing changes incrementally
**** Embrace DevOps Culture
**** Do not afraid to throw away, especially if it is a small amount of work.
***** Do not 'reFUCKtor' your applications.
***** Optimise your code for deletion.
**** If things are getting serious, prepare a capacity planning strategy

** Agenda

*** Definition
**** Size in terms of work done, not the LOC size
**** Who started it?
***** Netflix, Adrian Cockroft
**** Who claims to use it?
***** Spotify
***** Netflix
***** Amazon
***** eBay
*** 'It is not a something new'
**** Proper OO design
**** Actor Model
**** 'Smart endpoints, dumb pipes'
**** Proper DDD
**** UNIX philosophy (streams and pipes, small programs, do one thing and one thing well)
**** In general: Decomposition
**** Papers
***** Big Ball of Mud
***** Actor Model
***** Building Distributed Systems in Presence of Software Errors
*** Problems - It's not a Free Lunch
**** Deployment
**** Infrastructure Automation
**** Other operational challenges (backup, monitoring)
**** Service Discovery
**** Decentralised Data Management
**** Putting pressure on Communication Contracts
**** Fuzzed Boundaries
**** Integration through Database
**** Testing Challenges
*** Patterns
**** Circuit Breakers
**** Cross-functional Teams oriented around Business Capabilities

**** Cloud should help, not be a constraint.
**** What with existing applications?
***** Classical Design Patterns for the Rescue

They can be applied on the architectural / operation level as well.

****** Bridge Pattern
****** Wrapper Pattern
****** Split Pattern
****** Facade Pattern
* References
** http://www.slideshare.net/stonse/microservices-at-netflix
** https://vimeo.com/108441214
** http://martinfowler.com/articles/microservices.html
** http://www.infoq.com/interviews/adrian-cockcroft-microservices-devops
** http://klangism.tumblr.com/post/80087171446/microservices

It is a definition in terms of Actor Model.

** http://www.infoq.com/articles/microservices-intro
** http://microservices.io/patterns/microservices.html
** http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html
** http://www.infoq.com/presentations/migration-cloud-native
** Videos related with topic:
*** https://www.youtube.com/watch?v=Mn0_Xmw4rQs
*** https://www.youtube.com/watch?v=1wiMLkXz26M
*** https://www.youtube.com/watch?v=ebCtNmTVIJY
*** https://www.youtube.com/watch?v=BeNrVl2_nyI
*** http://www.you-tube.club/watch/?v=LEcdWVfbHvc
