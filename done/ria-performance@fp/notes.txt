:: RENDEROWANIE, DZIAŁANIE PRZEGLĄDARKI
	- Renderowanie - Style, Layout, Układ elementów i dokumentu HTML.
	- JavaScript - optymalizacja kodu jak również dołączania skryptów.
	- Sieć - dostęp do zasobów, nagłówki, cache.
	- Przeglądarka to dla Nas podstawowe środowisko uruchomieniowe warto więc znać jak działa od środka.

	- Fazy ładowania:
		- Request, po porcie 80 przychodzą dane.
		- 8K chunki (paczki) idą po sieci do przeglądarki.
		- Następnie 	przeglądarka przetwarza wszystko, tworzy drzewa i renderuje.

	- Lista elementów, które umieszczone w kodzie źródłowym strony mogą pobierać zasoby z zewnętrznych źródeł.
	- DOMContentLoaded aka jQuery.Ready - po nim dopiero wywoływany jest event load obiektu window (bardzo często mylone ze sobą).

	- Różnica? The DOMContentLoaded event will fire as soon as the DOM hierarchy has been fully constructed, the load event will do it when all the images and sub-frames have finished loading.
	- pageLoad() - wywołuje się po tym wszystkim i jest zdarzeniem ASP.NET AJAX.

	- Gecko - silnik renderowania Firefoxa.
	- WebKit - silnik renderowania Chrome i Safari (Android i iOS).

	- RÓŻNICA: Content-Sink - dodatkowa warstwa abstrakcji, która mapuje style inline na arkusze oraz zajmuje się stylowaniem i tworzeniem elementów DOM.

	- Nie tylko jedno drzewo DOM - to co widać po stronie klienta to tylko wierzchołek góry lodowej, w przeglądarce mamy kilka różnych typów drzew.
	- To na co mamy wpływ przy dynamicznej operacji za pomocą skryptów to Render Tree/Layout/Repaint.
	- Przykładowe właściwości CSS powodujące określone akcje związane z renderowaniem.
    - Zmiana atrybutów (np. data-attributes) - Dopóki takowego nie ma w selektorze - zmiana odbywa się bez ponownego stylowania. Jeśli pojawi się chociaż raz (!) każda jego zmiana powoduje cały cykl obliczania styli od nowa.

    - updateLayoutIgnorePendingStylesheets - bardzo, bardzo kosztowne wywołanie, przeładowywuje layout, bez styli (po wszystkim może sie wykonać jeszcze raz i jeszcze raz).

:: NARZĘDZIA	

	:: Chrome Developer Tools
        Chrome Developer Tools
        	ESC - Konsola
        	CTRL-SHIFT-F, CTRL-L, CTRL-O
        	Iframes
	        monitorEvents, $0 (aktualnie zaznaczony element w Elements)
	        	monitorEvents($0, 'mouse')

	        Kolorki w CSS
	        Live Edit - CSS i JS
	        DOM breakpoints
	        console - profile & profileEnd (ręczna instrumentacja kodu po stronie klienta)
	        Network
	        Timeline
	        	Recalculate styles - element.style.height = "50px";	        	
	            Layout - element.cssText = "width: 50px; height 60px;"
	            Repaint - element.cssText = "background-color: red;"
	            Czerwona i Niebieska linia (Fioletowa gdy oba zdarzenia się pokrywają)
	            Często przybliżane wartości a potem aktualizacja do dokładnie zmierzonej
	        Profiles (Heap! CPU! CSS!)
	        Audits (coś ala ySlow ale uboższe)

	:: Google Speed Tracer

	:: Tilt, Firefox Developer Tools
		Po co Tilt? - wytłumaczenie: Trójwymiarowa prezentacja struktury strony, coś innego niż prezentacja drzewiasta. 
			Poza typowym efekciarstwem pozwala na natychmiastową analizę, gdzie ilość elementów na stronie jest olbrzymia i zagnieżdżenie przerasta dopuszczalny poziom (wieże z bloczków).
		Funkcje do sprawdzania wydajności w Firefox - Niestety bez firebuga nic nie mamy.

	:: Firebug
		Profiler
		Net

	:: IE Developer Toolbar
		console - time & timeEnd (ręczna instrumentacja kodu po stronie klienta)
	:: Fiddler
		Fiddler is an HTTP debugging proxy server application written by Eric Lawrence of Microsoft.
			Podłączenie w przeglądarce
			Przykładowy skan

	:: Opera Dragonfly
		:: CSS profiler
			trunk-fpdev2

	:: ySlow

	:: DynaTrace AJAX

	:: jsPerf, Browserscope

	:: Bookmarklets
		:: NAVIGATION TIMING API
			- Stosunkowo nowe API wprowadzone do przeglądarek (snipet).
			- Można zbudować własne statystyki jak z zakładki Net z Firebuga/Chrome
				- TTFB - Time To First Byte
			- Can I Use? - minusy: brak Safari i Opery :(

:: OPTYMALIZACJA

	:: Sharding
		Termin bazodanowy - skalowanie poziome, dzielenie serwerów na kilka instancji, z których każda zajmuje się pewną częścią zasobów.

	:: Wpływ Coding Standards na Performance
		Okazuje się, że Coding Standards może mieć wpływ na wydajność front-endu - specjaliści z zoompf (tworzą własny komercyjny tool do analizy wydajnościowej aplikacji webowych) przyjżeli się najpopularniejszym regułom z Google Style Guide dla CSS/HTML.

		Smaczki:
		Omit the protocol portion (http:, https:) from URLs pointing to images and other media files, style sheets, and scripts unless the respective files are not available over both protocols.
		
		Unless necessary (for example with helper classes), do not use element names in conjunction with IDs or classes. - selektory jQuery działają zupełnie odwrotnie - sizzle (silnik selektorów) w 1.6 typ węzła pomaga w szybszym znajdowaniu elementów.

	:: RESPONSYWNOŚĆ
		Web Workers - oprócz wsparcia dla IE to problemem jest również to, że przesyłanie w obie strony elementów różnych od prymitywów ECMAScript jest niemożliwe (a na niektórych przeglądarkach i tak mamy tylko string) - ergo: zapomnijcie o operacjach na drzewie DOM w workerach.

		setTimeout(..., 0) - Prawie nigdy 0 - kiedyś rozdzielczość timera na Windows to 15ms, dokładność była przycinana do 10ms - był swego czasu nawet bug zgłoszony w V8 dotyczący tego zachowania. Obecnie specyfikacja HTML5 definiuje 4ms timeout/interwał jako najmniejszy dopuszczalny możliwy. Na IE ten kod powoduje jeszcze jedną ciekawą rzecz - do wersji IE8 powodowało bardzo prawdopodobne włączenie GC (w rzeczywistości timeout trwał 200-300ms).

		Jedna ciekawostka - eval.html.

	:: Async vs Defer
        async - ładuj asynchronicznie i wykonaj zaraz po wczytaniu.
        defer - załaduj asynchronicznie ale opóźnij wykonanie, dopóki parser HTML nie skończy.

        Async odpala skrypt tak szybko jak potrafi i niestety, ale dla skryptów które posiadają zależności i powinny wykonywać się synchronicznie po sobie nie bardzo się nadaje.
        Defer zachowuje kolejność ALE opoźnia onload (ponieważ skrypty są wykonywane zaraz przed onload). Nie opóźnia za to DomContentLoaded (czyli $.ready).

        Najlepsze wyjście to load-on-demand i łączenie łańcuchowo (jeden, za drugim) zależnych od siebie skryptów.

	:: Memory
		Dotyczy tworzenia poprzez literał i new (funkcji - zwłaszcza w pętlach - jslint zwraca na to uwagę).

		Należy również unikać korzystania z getterów i setterów napisanych na wzór Javowo-C# gdzie zwracana jest referencja do tego nowego obiektu, w praktyce łatwiej jest interpreterowi stworzyć nowy, a stary oznaczyć do usunięcia - ponieważ nie mamy władzy nad GC i zachowuje się on niedeterministycznie tworzy to niepotrzebne ilości śmieciowych obiektów.

	:: Image Beacons
		Wystarczy, że serwer odpowie 204 ('No Content') lub 200 ('OK'). W pierwszym przypadku nie wywoła się onload.

		+
			Cross domain
			No DOM/XHR manipulation
			Bardzo lekkie
			Błędy serwera nie wpływają na całą stronę			

		-
			Tylko wysyłanie danych
			Ograniczenia długości URL (zwykły GET)